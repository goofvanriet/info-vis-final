Traceback (most recent call last):
  File "/home/goof/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/goof/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/goof/anaconda3/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/goof/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/goof/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/goof/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/goof/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
%run hdi_per_year.ipynb
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[2], line 1[0m
[0;32m----> 1[0m get_ipython()[38;5;241m.[39mrun_line_magic([38;5;124m'[39m[38;5;124mrun[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mhdi_per_year.ipynb[39m[38;5;124m'[39m)

File [0;32m~/anaconda3/lib/python3.11/site-packages/IPython/core/interactiveshell.py:2456[0m, in [0;36mInteractiveShell.run_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2454[0m     kwargs[[38;5;124m'[39m[38;5;124mlocal_ns[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mget_local_scope(stack_depth)
[1;32m   2455[0m [38;5;28;01mwith[39;00m [38;5;28mself[39m[38;5;241m.[39mbuiltin_trap:
[0;32m-> 2456[0m     result [38;5;241m=[39m fn([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m   2458[0m [38;5;66;03m# The code below prevents the output from being displayed[39;00m
[1;32m   2459[0m [38;5;66;03m# when using magics with decorator @output_can_be_silenced[39;00m
[1;32m   2460[0m [38;5;66;03m# when the last Python token in the expression is a ';'.[39;00m
[1;32m   2461[0m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(fn, magic[38;5;241m.[39mMAGIC_OUTPUT_CAN_BE_SILENCED, [38;5;28;01mFalse[39;00m):

File [0;32m~/anaconda3/lib/python3.11/site-packages/IPython/core/magics/execution.py:737[0m, in [0;36mExecutionMagics.run[0;34m(self, parameter_s, runner, file_finder)[0m
[1;32m    735[0m     [38;5;28;01mwith[39;00m preserve_keys([38;5;28mself[39m[38;5;241m.[39mshell[38;5;241m.[39muser_ns, [38;5;124m'[39m[38;5;124m__file__[39m[38;5;124m'[39m):
[1;32m    736[0m         [38;5;28mself[39m[38;5;241m.[39mshell[38;5;241m.[39muser_ns[[38;5;124m'[39m[38;5;124m__file__[39m[38;5;124m'[39m] [38;5;241m=[39m filename
[0;32m--> 737[0m         [38;5;28mself[39m[38;5;241m.[39mshell[38;5;241m.[39msafe_execfile_ipy(filename, raise_exceptions[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m    738[0m     [38;5;28;01mreturn[39;00m
[1;32m    740[0m [38;5;66;03m# Control the response to exit() calls made by the script being run[39;00m

File [0;32m~/anaconda3/lib/python3.11/site-packages/IPython/core/interactiveshell.py:2981[0m, in [0;36mInteractiveShell.safe_execfile_ipy[0;34m(self, fname, shell_futures, raise_exceptions)[0m
[1;32m   2979[0m result [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mrun_cell(cell, silent[38;5;241m=[39m[38;5;28;01mTrue[39;00m, shell_futures[38;5;241m=[39mshell_futures)
[1;32m   2980[0m [38;5;28;01mif[39;00m raise_exceptions:
[0;32m-> 2981[0m     result[38;5;241m.[39mraise_error()
[1;32m   2982[0m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m result[38;5;241m.[39msuccess:
[1;32m   2983[0m     [38;5;28;01mbreak[39;00m

File [0;32m~/anaconda3/lib/python3.11/site-packages/IPython/core/interactiveshell.py:294[0m, in [0;36mExecutionResult.raise_error[0;34m(self)[0m
[1;32m    292[0m     [38;5;28;01mraise[39;00m [38;5;28mself[39m[38;5;241m.[39merror_before_exec
[1;32m    293[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39merror_in_exec [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 294[0m     [38;5;28;01mraise[39;00m [38;5;28mself[39m[38;5;241m.[39merror_in_exec

    [0;31m[... skipping hidden 1 frame][0m

File [0;32m/tmp/ipykernel_127541/1147035448.py:39[0m
[1;32m     37[0m [38;5;66;03m# Add traces for each category with specified colors[39;00m
[1;32m     38[0m [38;5;28;01mfor[39;00m category [38;5;129;01min[39;00m labels:
[0;32m---> 39[0m     fig[38;5;241m.[39madd_trace(go[38;5;241m.[39mBar(
[1;32m     40[0m         x[38;5;241m=[39mdf_grouped[[38;5;124m'[39m[38;5;124myear[39m[38;5;124m'[39m],
[1;32m     41[0m         y[38;5;241m=[39mdf_grouped[category],
[1;32m     42[0m         name[38;5;241m=[39mcategory,
[1;32m     43[0m         marker_color[38;5;241m=[39mcolors[category]
[1;32m     44[0m     ))
[1;32m     46[0m [38;5;66;03m# Update layout[39;00m
[1;32m     47[0m fig[38;5;241m.[39mupdate_layout(
[1;32m     48[0m     barmode[38;5;241m=[39m[38;5;124m'[39m[38;5;124mstack[39m[38;5;124m'[39m,
[1;32m     49[0m     title[38;5;241m=[39m[38;5;124m'[39m[38;5;124mAantal landen per HDI Categorie (1990 - 2022)[39m[38;5;124m'[39m,
[0;32m   (...)[0m
[1;32m     54[0m     autosize[38;5;241m=[39m[38;5;28;01mFalse[39;00m
[1;32m     55[0m )

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/graph_objs/_bar.py:3435[0m, in [0;36mBar.__init__[0;34m(self, arg, alignmentgroup, base, basesrc, cliponaxis, constraintext, customdata, customdatasrc, dx, dy, error_x, error_y, hoverinfo, hoverinfosrc, hoverlabel, hovertemplate, hovertemplatesrc, hovertext, hovertextsrc, ids, idssrc, insidetextanchor, insidetextfont, legend, legendgroup, legendgrouptitle, legendrank, legendwidth, marker, meta, metasrc, name, offset, offsetgroup, offsetsrc, opacity, orientation, outsidetextfont, selected, selectedpoints, showlegend, stream, text, textangle, textfont, textposition, textpositionsrc, textsrc, texttemplate, texttemplatesrc, uid, uirevision, unselected, visible, width, widthsrc, x, x0, xaxis, xcalendar, xhoverformat, xperiod, xperiod0, xperiodalignment, xsrc, y, y0, yaxis, ycalendar, yhoverformat, yperiod, yperiod0, yperiodalignment, ysrc, zorder, **kwargs)[0m
[1;32m   3431[0m arg[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mtype[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[1;32m   3433[0m [38;5;66;03m# Process unknown kwargs[39;00m
[1;32m   3434[0m [38;5;66;03m# ----------------------[39;00m
[0;32m-> 3435[0m [38;5;28mself[39m[38;5;241m.[39m_process_kwargs([38;5;241m*[39m[38;5;241m*[39m[38;5;28mdict[39m(arg, [38;5;241m*[39m[38;5;241m*[39mkwargs))
[1;32m   3437[0m [38;5;66;03m# Reset skip_invalid[39;00m
[1;32m   3438[0m [38;5;66;03m# ------------------[39;00m
[1;32m   3439[0m [38;5;28mself[39m[38;5;241m.[39m_skip_invalid [38;5;241m=[39m [38;5;28;01mFalse[39;00m

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/basedatatypes.py:4387[0m, in [0;36mBasePlotlyType._process_kwargs[0;34m(self, **kwargs)[0m
[1;32m   4384[0m err [38;5;241m=[39m _check_path_in_prop_tree([38;5;28mself[39m, k, error_cast[38;5;241m=[39m[38;5;167;01mValueError[39;00m)
[1;32m   4385[0m [38;5;28;01mif[39;00m err [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   4386[0m     [38;5;66;03m# e.g. underscore kwargs like marker_line_color[39;00m
[0;32m-> 4387[0m     [38;5;28mself[39m[k] [38;5;241m=[39m v
[1;32m   4388[0m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39m_validate:
[1;32m   4389[0m     [38;5;66;03m# Set extra property as-is[39;00m
[1;32m   4390[0m     [38;5;28mself[39m[k] [38;5;241m=[39m v

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/basedatatypes.py:4914[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4910[0m     res [38;5;241m=[39m res[p]
[1;32m   4912[0m res[38;5;241m.[39m_validate [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_validate
[0;32m-> 4914[0m res[prop[[38;5;241m-[39m[38;5;241m1[39m]] [38;5;241m=[39m value

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/basedatatypes.py:4874[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4870[0m         [38;5;28mself[39m[38;5;241m.[39m_set_array_prop(prop, value)
[1;32m   4872[0m     [38;5;66;03m# ### Handle simple property ###[39;00m
[1;32m   4873[0m     [38;5;28;01melse[39;00m:
[0;32m-> 4874[0m         [38;5;28mself[39m[38;5;241m.[39m_set_prop(prop, value)
[1;32m   4875[0m [38;5;28;01melse[39;00m:
[1;32m   4876[0m     [38;5;66;03m# Make sure properties dict is initialized[39;00m
[1;32m   4877[0m     [38;5;28mself[39m[38;5;241m.[39m_init_props()

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/basedatatypes.py:5218[0m, in [0;36mBasePlotlyType._set_prop[0;34m(self, prop, val)[0m
[1;32m   5216[0m         [38;5;28;01mreturn[39;00m
[1;32m   5217[0m     [38;5;28;01melse[39;00m:
[0;32m-> 5218[0m         [38;5;28;01mraise[39;00m err
[1;32m   5220[0m [38;5;66;03m# val is None[39;00m
[1;32m   5221[0m [38;5;66;03m# -----------[39;00m
[1;32m   5222[0m [38;5;28;01mif[39;00m val [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   5223[0m     [38;5;66;03m# Check if we should send null update[39;00m

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/basedatatypes.py:5213[0m, in [0;36mBasePlotlyType._set_prop[0;34m(self, prop, val)[0m
[1;32m   5210[0m validator [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_validator(prop)
[1;32m   5212[0m [38;5;28;01mtry[39;00m:
[0;32m-> 5213[0m     val [38;5;241m=[39m validator[38;5;241m.[39mvalidate_coerce(val)
[1;32m   5214[0m [38;5;28;01mexcept[39;00m [38;5;167;01mValueError[39;00m [38;5;28;01mas[39;00m err:
[1;32m   5215[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_skip_invalid:

File [0;32m~/anaconda3/lib/python3.11/site-packages/_plotly_utils/basevalidators.py:1383[0m, in [0;36mColorValidator.validate_coerce[0;34m(self, v, should_raise)[0m
[1;32m   1381[0m     validated_v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mvc_scalar(v)
[1;32m   1382[0m     [38;5;28;01mif[39;00m validated_v [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m should_raise:
[0;32m-> 1383[0m         [38;5;28mself[39m[38;5;241m.[39mraise_invalid_val(v)
[1;32m   1385[0m     v [38;5;241m=[39m validated_v
[1;32m   1387[0m [38;5;28;01mreturn[39;00m v

File [0;32m~/anaconda3/lib/python3.11/site-packages/_plotly_utils/basevalidators.py:296[0m, in [0;36mBaseValidator.raise_invalid_val[0;34m(self, v, inds)[0m
[1;32m    293[0m             [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m inds:
[1;32m    294[0m                 name [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124m[[39m[38;5;124m"[39m [38;5;241m+[39m [38;5;28mstr[39m(i) [38;5;241m+[39m [38;5;124m"[39m[38;5;124m][39m[38;5;124m"[39m
[0;32m--> 296[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    297[0m [38;5;250m            [39m[38;5;124;03m"""[39;00m
[1;32m    298[0m [38;5;124;03m    Invalid value of type {typ} received for the '{name}' property of {pname}[39;00m
[1;32m    299[0m [38;5;124;03m        Received value: {v}[39;00m
[1;32m    300[0m 
[1;32m    301[0m [38;5;124;03m{valid_clr_desc}"""[39;00m[38;5;241m.[39mformat(
[1;32m    302[0m                 name[38;5;241m=[39mname,
[1;32m    303[0m                 pname[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mparent_name,
[1;32m    304[0m                 typ[38;5;241m=[39mtype_str(v),
[1;32m    305[0m                 v[38;5;241m=[39m[38;5;28mrepr[39m(v),
[1;32m    306[0m                 valid_clr_desc[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mdescription(),
[1;32m    307[0m             )
[1;32m    308[0m         )

[0;31mValueError[0m: 
    Invalid value of type 'builtins.str' received for the 'color' property of bar.marker
        Received value: 'viridis_2'

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
      - A number that will be interpreted as a color
        according to bar.marker.colorscale
      - A list or array of any of the above

